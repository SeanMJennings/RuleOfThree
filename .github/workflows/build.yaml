name: Build and deploy
env:
  CLIENT_OUTPUT_FOLDER: client/dist
  SERVER_OUTPUT_FOLDER: server
  PYTHON_VERSION: '3.11.9'
on:
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build_client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      - name: Build and test
        run: |
          cd ./client
          yarn
          yarn build-only
          yarn test
          yarn lint
      - name: Cache client build
        uses: actions/cache@v4
        with:
          path: ${{ env.CLIENT_OUTPUT_FOLDER }}
          key: ${{ runner.os }}-client-${{ github.run_id}}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-client-${{ github.run_id}}-${{ github.run_number }}
  build_server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Set up Python 
        run: uv python install ${{ env.PYTHON_VERSION }}
      - name: Cache server build
        uses: actions/cache@v4
        with:
          path: ${{ env.SERVER_OUTPUT_FOLDER }}
          key: ${{ runner.os }}-server-${{ github.run_id}}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-server-${{ github.run_id}}-${{ github.run_number }}
      - name: Install project dependencies
        run: |
          cd server
          uv pip compile pyproject.toml -o requirements.txt
          uv venv
          uv pip install -r requirements.txt --target=".python_packages/lib/site-packages"
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get cosmos connection string
        uses: azure/cli@v2
        with:
          inlineScript: |
            RAW_STRING=$(az cosmosdb keys list --type connection-strings --name ${{ secrets.COSMOS_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query connectionStrings[0].connectionString)
            CONNECTION_STRING=${RAW_STRING:1:-2}
            echo CONNECTION_STRING=$CONNECTION_STRING >> $GITHUB_ENV
      - name: Update values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'server/src/config.yaml'
          propertyPath: 'connection_string'
          value: ${{ env.CONNECTION_STRING }}
          commitChange: false
      - name: Update values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'server/src/config.yaml'
          propertyPath: 'database'
          value: ${{ secrets.COSMOS_DATABASE }}
          commitChange: false
  test_server:
    runs-on: windows-latest # required for Cosmos DB emulator, would much prefer ubuntu-latest
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      - name: Install project dependencies
        run: cd ./server && uv sync
      - name: Lint using Flake8
        run: cd ./server && uv tool run flake8
      - name: Start Azure Cosmos DB emulator
        run: |
          Write-Host "Launching Cosmos DB Emulator"
          Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
          Start-CosmosDbEmulator
      - name: Test with pytest
        run: cd ./server && ./venv/Scripts/activate.ps1 && pytest
  deploy:
    needs: [ build_client, build_server, test_server ]
    runs-on: ubuntu-latest
    name: Deploy
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Get client build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CLIENT_OUTPUT_FOLDER }}
          key: ${{ runner.os }}-client-${{ github.run_id}}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-client-${{ github.run_id}}-${{ github.run_number }}
      - name: Get server build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.SERVER_OUTPUT_FOLDER }}
          key: ${{ runner.os }}-server-${{ github.run_id}}-${{ github.run_number }}
          restore-keys: ${{ runner.os }}-server-${{ github.run_id}}-${{ github.run_number }}
      - name: Rename .venv to venv
        run: mv server/.venv server/venv
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get SWA deployment token
        uses: azure/cli@v2
        id: swa-token
        with:
          inlineScript: |
            SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ secrets.STATIC_WEB_APP_NAME }} -o tsv --query properties.apiKey)
            echo "::add-mask::$SWA_DEPLOYMENT_TOKEN"
            echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV
      - name: Deploy App
        id: build-deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          skip_app_build: true
          skip_api_build: true
          app_location: ${{ env.CLIENT_OUTPUT_FOLDER }}
      - name: Deploy Azure function app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.FUNCTION_APP_NAME }}
          package: ${{ env.SERVER_OUTPUT_FOLDER }}
      - name: Cleanup cache
        run: |
          gh extension install actions/gh-actions-cache
          cacheKeys=$(gh actions-cache list -R ${{ github.repository }} | cut -f 1)
          set +e
          for cacheKey in $cacheKeys
          do
            gh actions-cache delete $cacheKey -R ${{ github.repository }} --confirm
          done
