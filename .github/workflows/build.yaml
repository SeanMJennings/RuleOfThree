name: Build and deploy
env:
  OUTPUT_FOLDER: client/dist
on:
  push:
    branches:
      - main
jobs:
  build_client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      - name: Build and test
        run: |
          cd ./client
          yarn
          yarn build-only
          yarn test
          yarn lint
      - name: Publish website output
        uses: actions/upload-artifact@v4
        with:
          name: website
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}
  build_server:
    runs-on: windows-latest # required for Cosmos DB emulator, would much prefer ubuntu-latest
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v4
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'poetry'
      - name: Install dependencies
        run: python -m pip install pyyaml
      - name: Install project dependencies
        run: |
          cd ./server
          poetry install
      - name: Lint using Flake8
        run: |
          cd ./server
          poetry run flake8
      - name: Update values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'server/secret_config.yaml'
          propertyPath: 'URL'
          value: ${{ secrets.PIPELINE_COSMOS_URL }}
          commitChange: false
      - name: Update values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'server/secret_config.yaml'
          propertyPath: 'accountKey'
          value: ${{ secrets.PIPELINE_COSMOS_ACCOUNT_KEY }}
          commitChange: false
      - name: Update values.yaml
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'server/secret_config.yaml'
          propertyPath: 'database'
          value: ${{ secrets.PIPELINE_COSMOS_DATABASE }}
          commitChange: false
      - name: Start Azure Cosmos DB emulator
        run: |
          Write-Host "Launching Cosmos DB Emulator"
          Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
          Start-CosmosDbEmulator
      - name: Populate config settings
        run: cd ./server && python populate_configs.py
      - name: Test with pytest
        run: |
          cd ./server
          poetry run pytest
  provision_azure:
    runs-on: ubuntu-latest
    needs: [build_client, build_server]
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Ensure resource group exists
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l ${{ secrets.RESOURCE_GROUP_LOCATION }}
      - name: Create a static web app
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az staticwebapp create \
                --name ${{ secrets.STATIC_WEB_APP_NAME }} \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --location ${{ secrets.STATIC_WEB_APP_LOCATION }} \
                --sku free
  deploy_static_web_app:
    needs: [ provision_azure ]
    runs-on: ubuntu-latest
    name: Deploy SWA
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get SWA deployment token
        uses: azure/cli@v2
        id: swa-token
        with:
          inlineScript: |
            SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n ${{ secrets.STATIC_WEB_APP_NAME }} -o tsv --query properties.apiKey)
            echo "::add-mask::$SWA_DEPLOYMENT_TOKEN"
            echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV
      - name: Download website
        uses: actions/download-artifact@v4
        with:
          name: website
          path: ${{ github.workspace }}/${{ env.OUTPUT_FOLDER }}
      - name: Deploy frontend
        id: build-deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          skip_app_build: true
          app_location: ${{ env.OUTPUT_FOLDER }}
